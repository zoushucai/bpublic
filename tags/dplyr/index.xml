<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dplyr on zsc</title>
    <link>/tags/dplyr/</link>
    <description>Recent content in dplyr on zsc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 04 Jan 2018 00:00:00 +0000</lastBuildDate><atom:link href="/tags/dplyr/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>dplyr -- 3合并数据</title>
      <link>/post/2018-01-04-dplyr3/</link>
      <pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-01-04-dplyr3/</guid>
      <description>1、转换与合并 2、筛选与合并 3、集合操作 4、数据排序 5、 记录是一行,字段是一列
1、转换与合并 left_join(a, b, by = “x1”)： 向数据集a中加入匹配的数据集b记录（行）。
right_join(a, b, by = “x1”)： 向数据集b中加入匹配的数据集a记录。
inner_join(a, b, by = “x1”)： 合并数据。仅保留匹配的记录。
full_join(a, b, by = “x1”)： 合并数据。保留所有记录，所有行。没有的用NA填充
library(dplyr) a=data.frame(x1=c(&amp;quot;A&amp;quot;,&amp;quot;B&amp;quot;,&amp;quot;C&amp;quot;),x2=c(1:3)) b=data.frame(x1=c(&amp;quot;A&amp;quot;,&amp;quot;B&amp;quot;,&amp;quot;D&amp;quot;),x3=c(&amp;quot;T&amp;quot;,&amp;quot;F&amp;quot;,&amp;quot;T&amp;quot;)) a;b ## x1 x2 ## 1 A 1 ## 2 B 2 ## 3 C 3 ## x1 x3 ## 1 A T ## 2 B F ## 3 D T left_join(a, b, by = &amp;quot;x1&amp;quot;)# 向数据集a中加入匹配的数据集b记录。 ## x1 x2 x3 ## 1 A 1 T ## 2 B 2 F ## 3 C 3 &amp;lt;NA&amp;gt; right_join(a, b, by = &amp;quot;x1&amp;quot;)# 向数据集b中加入匹配的数据集a记录。 ## x1 x2 x3 ## 1 A 1 T ## 2 B 2 F ## 3 D NA T inner_join(a, b, by = &amp;quot;x1&amp;quot;)# 合并数据。仅保留匹配的记录。 ## x1 x2 x3 ## 1 A 1 T ## 2 B 2 F full_join(a, b, by = &amp;quot;x1&amp;quot;)# 合并数据。保留所有记录，所有行，没有的用NA填充 ## x1 x2 x3 ## 1 A 1 T ## 2 B 2 F ## 3 C 3 &amp;lt;NA&amp;gt; ## 4 D NA T 2、筛选与合并 semi_join(a, b, by = “x1”)： 数据集a中能与数据集b匹配的记录。</description>
    </item>
    
    <item>
      <title>dplyr -- 2实战</title>
      <link>/post/2018-01-03-dplyrshizhan2/</link>
      <pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-01-03-dplyrshizhan2/</guid>
      <description>1.1、选择行filter() 1.2、选择列 select() 1.3、排序arrange() 1.4、添加新变量mutate 1.5 汇总(行): summarise() 1.6、分组动作 把前两天的两篇文章合并，解决方法：名字还是不能太长，在content目录下新建test目录，把它放在content目录下的test目录，不放在post目录，我的test目录只有两篇文章
1.1、选择行filter() 安装nycflights13包，该软件包中的飞机航班数据将用于本文中dplyr包各个函数的演示
library(dplyr) library(nycflights13) 函数tbl_df()将过长过大的数据集转换为显示更友好的 tbl_df 类型:
flights &amp;lt;- tbl_df(flights) head(flights) #有336,776 x 19 ## # A tibble: 6 x 19 ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; ## 1 2013 1 1 517 515 2 830 819 ## 2 2013 1 1 533 529 4 850 830 ## 3 2013 1 1 542 540 2 923 850 ## 4 2013 1 1 544 545 -1 1004 1022 ## 5 2013 1 1 554 600 -6 812 837 ## 6 2013 1 1 554 558 -4 740 728 ## # … with 11 more variables: arr_delay &amp;lt;dbl&amp;gt;, carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, ## # tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, ## # hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt; filter(flights,origin == &amp;quot;JFK&amp;quot;,month == 6L) #－ 获取六月份所有从”JFK”机场起飞的航班 ## # A tibble: 9,472 x 19 ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; ## 1 2013 6 1 2 2359 3 341 350 ## 2 2013 6 1 538 545 -7 925 922 ## 3 2013 6 1 539 540 -1 832 840 ## 4 2013 6 1 553 600 -7 700 711 ## 5 2013 6 1 554 600 -6 851 908 ## 6 2013 6 1 557 600 -3 934 942 ## 7 2013 6 1 559 600 -1 856 930 ## 8 2013 6 1 606 610 -4 847 906 ## 9 2013 6 1 609 615 -6 759 808 ## 10 2013 6 1 615 610 5 837 847 ## # … with 9,462 more rows, and 11 more variables: arr_delay &amp;lt;dbl&amp;gt;, ## # carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, ## # air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt; slice(flights,1:2) #选取前面的1:2行 ## # A tibble: 2 x 19 ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; ## 1 2013 1 1 517 515 2 830 819 ## 2 2013 1 1 533 529 4 850 830 ## # … with 11 more variables: arr_delay &amp;lt;dbl&amp;gt;, carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, ## # tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, ## # hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt; sample_n(flights, 4, replace = TRUE)# 随机选取4条数据记录。 ## # A tibble: 4 x 19 ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; ## 1 2013 8 22 1857 1705 112 2150 2020 ## 2 2013 5 27 1958 1925 33 2152 2129 ## 3 2013 9 10 1345 1345 0 1520 1520 ## 4 2013 11 21 1058 1100 -2 1311 1304 ## # … with 11 more variables: arr_delay &amp;lt;dbl&amp;gt;, carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, ## # tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, ## # hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt; flights %&amp;gt;% top_n(4,dep_time) ## # A tibble: 29 x 19 ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; ## 1 2013 10 30 2400 2359 1 327 337 ## 2 2013 11 27 2400 2359 1 515 445 ## 3 2013 12 5 2400 2359 1 427 440 ## 4 2013 12 9 2400 2359 1 432 440 ## 5 2013 12 9 2400 2250 70 59 2356 ## 6 2013 12 13 2400 2359 1 432 440 ## 7 2013 12 19 2400 2359 1 434 440 ## 8 2013 12 29 2400 1700 420 302 2025 ## 9 2013 2 7 2400 2359 1 432 436 ## 10 2013 2 7 2400 2359 1 443 444 ## # … with 19 more rows, and 11 more variables: arr_delay &amp;lt;dbl&amp;gt;, carrier &amp;lt;chr&amp;gt;, ## # flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;, ## # distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt; 1.</description>
    </item>
    
    <item>
      <title>dplyr -- 1基本函数简介</title>
      <link>/md/2018-01-01-dplyr/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/md/2018-01-01-dplyr/</guid>
      <description>0、dplyr初始 由于R语言每一个步骤没有赋值的话，是不会改变原有的数据，都是建立一个新的数据。原有数据不改变。
dplyr::tbl_df(iris)： 将数据转化为tbl类。只会显示适合屏幕大小的数据：
dplyr::glimpse(iris)： tbl数据的信息密集概括。 类似str()函数
dplyr::%&amp;gt;%： 将左边的对象作为第一个参数（或参数 .）传递到右边的函数中。利用%&amp;gt;%进行“Piping”管道操作增强了代码的可读性，
x %&amp;gt;% f(y) 相当于 f(x, y) y %&amp;gt;% f(x, ., z) 相当于 f(x, y, z ) 1、filter 行过滤 **filter(iris, Sepal.Length &amp;gt; 7) ：**抽取符合逻辑条件的数据记录。 **distinct(iris) ：**删除重复记录。 distinct(iris, Species) 保留iris某一列的唯一值 **sample_frac(iris, 0.5, replace = TRUE) ：**随机选取部分数据(占总体的0.5)记录。 **sample_n(iris, 10, replace = TRUE) ：**随机选取n条数据记录。 **slice(iris, 10:15) ：**通过位置选取数据记录。 **top_n(storms, 2, date) ：**选取并排列前n条数据记录 （若为分组数据则按组排序） 2、select 列过滤 rename(.data, ...) rename_all(.tbl, .funs = list(), ...) rename_if(.tbl, .predicate, .funs = list(), .</description>
    </item>
    
    <item>
      <title>tibble包的列和行名相互转换以及添加行和列</title>
      <link>/md/2017-12-31-tibble%E5%8C%85%E7%9A%84%E5%88%97-%E8%A1%8C%E5%90%8D%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Sun, 31 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/md/2017-12-31-tibble%E5%8C%85%E7%9A%84%E5%88%97-%E8%A1%8C%E5%90%8D%E8%BD%AC%E6%8D%A2/</guid>
      <description>1、列与行名相互转化 tibble包：
has_rownames(df)：检查是否存在行名
remove_rownames(df) ： 移除行名
rownames_to_column(df, var = &amp;ldquo;rowname&amp;rdquo;) ： 行名变为某列
rowid_to_column(df, var = &amp;ldquo;rowid&amp;rdquo;)： 行名变为某列,只能变为数字,个人不推荐 column_to_rownames(df, var = &amp;ldquo;rowname&amp;rdquo;) ： 某列变为行名，并删除某列,要求这个列值唯一
library(tibble) head(mtcars) has_rownames(mtcars) #检查是否存在行名 new_mtcars=rownames_to_column(mtcars, var = &amp;#34;new_col&amp;#34;) #行名变为某列,行名此时被移除 head(new_mtcars) has_rownames(rownames_to_column(mtcars, var = &amp;#34;new_col&amp;#34;)) has_rownames(rowid_to_column(mtcars, var = &amp;#34;new_col&amp;#34;)) df=remove_rownames(mtcars)#： 移除行名 head(df) column_to_rownames(new_mtcars, var = &amp;#34;new_col&amp;#34;)# 某列变为行名，并删除某列,要求这个列值唯一 2、添加行与列 添加行：
add_row(.data, &amp;hellip;, .before = NULL, .after = NULL) 添加列：
add_column(.data, &amp;hellip;, .before = NULL, .after = NULL) .before 指添加在第n行(列)，默认在最后 .</description>
    </item>
    
  </channel>
</rss>
