<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on zsc</title>
    <link>/post/</link>
    <description>Recent content in Posts on zsc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 11 May 2019 00:00:00 +0000</lastBuildDate><atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>测试rmarkdown输出页面</title>
      <link>/post/2019-05-11-outputwidth/</link>
      <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-05-11-outputwidth/</guid>
      <description>t(iris[1:30,]) #&amp;gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #&amp;gt; Sepal.Length &amp;quot;5.1&amp;quot; &amp;quot;4.9&amp;quot; &amp;quot;4.7&amp;quot; &amp;quot;4.6&amp;quot; &amp;quot;5.0&amp;quot; &amp;quot;5.4&amp;quot; &amp;quot;4.6&amp;quot; &amp;quot;5.0&amp;quot; &amp;quot;4.4&amp;quot; &amp;quot;4.9&amp;quot; &amp;quot;5.4&amp;quot; &amp;quot;4.8&amp;quot; &amp;quot;4.8&amp;quot; &amp;quot;4.3&amp;quot; &amp;quot;5.8&amp;quot; &amp;quot;5.7&amp;quot; &amp;quot;5.4&amp;quot; &amp;quot;5.1&amp;quot; &amp;quot;5.7&amp;quot; &amp;quot;5.1&amp;quot; &amp;quot;5.4&amp;quot; &amp;quot;5.1&amp;quot; &amp;quot;4.6&amp;quot; &amp;quot;5.1&amp;quot; &amp;quot;4.8&amp;quot; &amp;quot;5.0&amp;quot; &amp;quot;5.0&amp;quot; &amp;quot;5.2&amp;quot; &amp;quot;5.2&amp;quot; &amp;quot;4.7&amp;quot; #&amp;gt; Sepal.Width &amp;quot;3.5&amp;quot; &amp;quot;3.0&amp;quot; &amp;quot;3.2&amp;quot; &amp;quot;3.</description>
    </item>
    
    <item>
      <title>非标准计算</title>
      <link>/post/2019-05-02-nonstandard-calculation/</link>
      <pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-05-02-nonstandard-calculation/</guid>
      <description>非标准计算 1. 捕获表达式 1.1 quote() : 1.2 substitute 1. 3. 创建函数调用 1.4 .substitute_q() 对substituted()的补充 1.5. subs()函数 2. 对捕获表达式后的处理方式 2.1. 执行表达式 — — eval() 2.2 eval 函数的用法 2 .3 .表达式与字符串相互转变 参考 非标准计算 1. 捕获表达式 将表达式捕获转为语言对象，捕获表达式意味着防止表达式被执行，而将其本身存储为变量的形式。具有这个功能的函数有如下几个函数，注意其不同。
1.1 quote() : ​ quote()捕获到函数调用是会返回调用，而捕获到变量名时会返回一个符号，只要代码语法正确，它就会返回表示被捕获表达式本身的语言对象。即便函数不存在或者变量未定义，也可以捕获表达式本身。
rm(list = ls() ) x = quote(a+b) # 定义一个表达式调用,但是这些变量没有定义 x #&amp;gt; a + b class(x) #&amp;gt; [1] &amp;quot;call&amp;quot; typeof(x) # 变成语言对象类型， #&amp;gt; [1] &amp;quot;language&amp;quot; x = quote(rnorm) x #&amp;gt; rnorm class(x) #&amp;gt; [1] &amp;quot;name&amp;quot; typeof(x) # 变成符号对象类型， #&amp;gt; [1] &amp;quot;symbol&amp;quot; quote(xfun(a = 1:n)) # xfun都么有定义 #&amp;gt; xfun(a = 1:n) 理解：变量和符号对象的区别，以及函数和调用对象的区别。</description>
    </item>
    
    <item>
      <title>R函数参数的有关问题</title>
      <link>/post/2019-05-01-function-arguments/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-05-01-function-arguments/</guid>
      <description>R函数参数的有关问题 1. args 可以用来查看某个函数包含了哪些参数 2. 匹配参数— match.arg() 3. 以字符串作为函数名 — get函数 4. 以字符串作为函数名 — call()函数 5. 把函数参数(不带字符串参数)转变为字符串 R函数参数的有关问题 1. args 可以用来查看某个函数包含了哪些参数 args(sin) #&amp;gt; function (x) #&amp;gt; NULL args(lm) #&amp;gt; function (formula, data, subset, weights, na.action, method = &amp;quot;qr&amp;quot;, #&amp;gt; model = TRUE, x = FALSE, y = FALSE, qr = TRUE, singular.ok = TRUE, #&amp;gt; contrasts = NULL, offset, ...) #&amp;gt; NULL args(paste) #&amp;gt; function (..., sep = &amp;quot; &amp;quot;, collapse = NULL, recycle0 = FALSE) #&amp;gt; NULL 2.</description>
    </item>
    
    <item>
      <title>list 操作重要的函数</title>
      <link>/post/2019-04-30-listoperate/</link>
      <pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-04-30-listoperate/</guid>
      <description>list 操作重要的函数 1.捕获省略号中的内容 2.map函数 3.reduce 函数和accumulate 函数 4. do.call函数 5. 把正常数据(数据框)转变为list 6. 更多list操作 list 操作重要的函数 ​ 我们知道R中比较复杂的数据结构为list，它可以构造出很多我们想要的数据格式，今天我们结合函数…的操作，讲解一下对一个长度不定的list如何便捷的操作。
以前提过可参考：(这里直接copy)
1.捕获省略号中的内容 ​ 先看一个例子：构造一个函数然后对所有的参数进行相加求和。
addemup &amp;lt;- function(x, ...){ args &amp;lt;- list(...)# 推荐把省略号的内容分配给list,然后在对该list进行操作 for (a in args){ x &amp;lt;- x + a } x } addemup(1,1) #&amp;gt; [1] 2 addemup(1,2,3,4,5) #&amp;gt; [1] 15 ​ 我们还可以通过..1,..2到..9等直接引用列表…中的内容。..1表示第一项，..2表示第二项，以此类推。
对list操作可以结合purrr包中的map, reduce, accumulate和基础函数do.call等 操作更方便。一个实际的例子，
DGM_U = function(...){ ####### 第一部分是对参数的检查 ##################### # 输入的参数为U_{k}，U_{k}代表一个完整的区间乘积互反判断矩阵。 n = nrow(..1) m = ncol(..1) args &amp;lt;- list(.</description>
    </item>
    
    <item>
      <title>省略号参数— 可变长参数</title>
      <link>/post/2019-04-30-ellipsisparameter/</link>
      <pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-04-30-ellipsisparameter/</guid>
      <description>省略号参数— 可变长参数 1.捕获省略号中的内容 2. 用省略号传递给图形参数 3. 将省略号与其他参数结合 4. 也可对省略号取名称 5. 将省略号参数解压缩为本地函数变量（甚至是全局变量） 省略号参数— 可变长参数 ​ 在R中我们查看别人的函数或者内部函数，经常用到…这种参数，...也称把可变长参数，今天就来聊一聊中方法的使用。
1.捕获省略号中的内容 先看一个例子：构造一个函数然后对所有的参数进行相加求和。
addemup &amp;lt;- function(x, ...){ args &amp;lt;- list(...)# 推荐把省略号的内容分配给list,然后在对该list进行操作 for (a in args){ x &amp;lt;- x + a } x } addemup(1,1) #&amp;gt; [1] 2 addemup(1,2,3,4,5) #&amp;gt; [1] 15 我们还可以通过..1,..2到..9等直接引用列表…中的内容。..1表示第一项，..2表示第二项，以此类推。
对list操作可以结合purrr包中的map, reduce, accumulate和基础函数do.call等 操作更方便。一个实际的例子，
DGM_U = function(...){ ####### 第一部分是对参数的检查 ##################### # 输入的参数为U_{k}，U_{k}代表一个完整的区间乘积互反判断矩阵。 n = nrow(..1) m = ncol(..1) args &amp;lt;- list(...) stopifnot( length(args) &amp;gt;=2, all( map_lgl(args,is.</description>
    </item>
    
    <item>
      <title>R画带箭头的坐标轴</title>
      <link>/post/2019-04-26-rplotarrows/</link>
      <pubDate>Fri, 26 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-04-26-rplotarrows/</guid>
      <description>0.1 R 语言画带箭头的坐标轴 0.1.1 方法一 0.1.2 方法二： 0.1.3 方法三 0.2 基本函数画多折线图 0.1 R 语言画带箭头的坐标轴 本质的方法：就是去掉原有的坐标轴，然后通过R的低等函数一步一步的画出坐标轴以及需要的曲线，以下是google到的几种方法：
0.1.1 方法一 ################## 画带箭头的坐标轴 ## estimate curve x &amp;lt;- seq(-1,1.5,0.1); y &amp;lt;- c(1.3,1.32,1.33,1.32,1.25,1.1,0.7,0.5,0.4,0.38,0.4,0.41,0.42,0.43,0.44,0.4,0.3,0.1,0,-0.05,-0.1,-0.15,-0.2,-0.24,-0.28,-0.3); f &amp;lt;- splinefun(x,y); ## calculate precise points along estimated curve x &amp;lt;- seq(-1,1.5,0.01); y &amp;lt;- f(x); ## precompute limits xlim &amp;lt;- c(min(x),max(x)); ylim &amp;lt;- c(min(y)-0.4,max(y)+0.2); ## set global plot params par(xaxs=&amp;#39;i&amp;#39;,yaxs=&amp;#39;i&amp;#39;,mar=c(1,1,3,3)+0.1); ## &amp;quot;internal&amp;quot; axis spacing, meaning no extended range, and slightly adjust margins ## draw plot plot(NA,xlim=xlim,ylim=ylim,axes=F,ann=F); ## set plot bounds, no default ornaments arrows(c(0,xlim[1]),c(ylim[1],0),c(0,xlim[2]),c(ylim[2],0),0.</description>
    </item>
    
    <item>
      <title>R语言绘制双坐标图</title>
      <link>/post/2019-04-01plottwoaxis/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-04-01plottwoaxis/</guid>
      <description>0.1 使用plotrix包 0.2 twoord.plot() 参数解释 0.1 使用plotrix包 #png(&amp;quot;2y_1.png&amp;quot;) rm(list = ls()) library(plotrix) library(dplyr) ## ## 载入程辑包：&amp;#39;dplyr&amp;#39; ## The following objects are masked from &amp;#39;package:stats&amp;#39;: ## ## filter, lag ## The following objects are masked from &amp;#39;package:base&amp;#39;: ## ## intersect, setdiff, setequal, union new_iris = arrange(iris,Sepal.Length)# 按照花瓣的长度进行排序 --- 为了后面好看 head(new_iris,10) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 4.3 3.0 1.1 0.1 setosa ## 2 4.4 2.9 1.4 0.2 setosa ## 3 4.</description>
    </item>
    
    <item>
      <title>智能算法测试函数可视化</title>
      <link>/post/2019-02-21-testfunctionvisualization/</link>
      <pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-02-21-testfunctionvisualization/</guid>
      <description>1 智能算法测试函数可视化(二维) 1.1 1 Sphere 函数 1.2 3 Rosenbrock 函数 1.3 4、Rastrigin 1.4 5 Griewank 函数 1.5 6 Ackley 函数 1.6 7 Noise函数 1 智能算法测试函数可视化(二维) 1.1 1 Sphere 函数 \[f(x) = \sum^n_{i=1}x_i^2\] 全局最优点为\(x =(0,0,\cdots ,0 ),f(x) =0\)
############################# #### 二维函数 --- 可视化 ############################## ## 1 、 Sphere 函数 f1_Sphere2 = function(x,y){ return(x^2 + y^2) } y = x &amp;lt;- seq(-10, 10, 0.1) z &amp;lt;- outer(x, y, f1_Sphere2) library(plotly) ## 载入需要的程辑包：ggplot2 ## ## 载入程辑包：&amp;#39;plotly&amp;#39; ## The following object is masked from &amp;#39;package:ggplot2&amp;#39;: ## ## last_plot ## The following object is masked from &amp;#39;package:stats&amp;#39;: ## ## filter ## The following object is masked from &amp;#39;package:graphics&amp;#39;: ## ## layout library(widgetframe) ## 载入需要的程辑包：htmlwidgets p = plot_ly() %&amp;gt;% add_surface(x = ~x, y = ~y, z = ~z) frameWidget(p) ## 2 Schwefel 函数 \[f(x) = \sum^n_i|x_i| + \prod^n_i|x_i|\] 全局最优点为\(x =(0,0,\cdots ,0 ),f(x) =0\)</description>
    </item>
    
    <item>
      <title>R语言输出latex或html</title>
      <link>/post/2018-11-21-r%E5%AF%B9%E8%B1%A1%E8%BE%93%E5%87%BAlatex%E6%88%96html%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Wed, 21 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-11-21-r%E5%AF%B9%E8%B1%A1%E8%BE%93%E5%87%BAlatex%E6%88%96html%E6%A0%BC%E5%BC%8F/</guid>
      <description>简介knitr常用参数 xtable包 输出为纯HTML格式或者LaTeX格式 若想在rmarkdown中输出时能正常显示上面的格式怎么办了？ kableExtra包 基于HTML的table 设置主题 表格样式 参考： 有一些时候，我们想把R对象输出为LaTeX格式或者HTML格式，怎么办呢？
简介knitr常用参数 xtable包 输出为纯HTML格式或者LaTeX格式 tt &amp;lt;- head(iris) # 普通的输出 library(xtable) print(xtable(tt),type=&amp;quot;html&amp;quot;) # 输出为纯HTML格式 ## &amp;lt;!-- html table generated in R 4.0.2 by xtable 1.8-4 package --&amp;gt; ## &amp;lt;!-- Mon Sep 14 21:28:39 2020 --&amp;gt; ## &amp;lt;table border=1&amp;gt; ## &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt; &amp;lt;/th&amp;gt; &amp;lt;th&amp;gt; Sepal.Length &amp;lt;/th&amp;gt; &amp;lt;th&amp;gt; Sepal.Width &amp;lt;/th&amp;gt; &amp;lt;th&amp;gt; Petal.Length &amp;lt;/th&amp;gt; &amp;lt;th&amp;gt; Petal.Width &amp;lt;/th&amp;gt; &amp;lt;th&amp;gt; Species &amp;lt;/th&amp;gt; &amp;lt;/tr&amp;gt; ## &amp;lt;tr&amp;gt; &amp;lt;td align=&amp;quot;right&amp;quot;&amp;gt; 1 &amp;lt;/td&amp;gt; &amp;lt;td align=&amp;quot;right&amp;quot;&amp;gt; 5.</description>
    </item>
    
    <item>
      <title>R金融分析以及VaR</title>
      <link>/post/2018-11-14-r%E9%87%91%E8%9E%8D%E5%88%86%E6%9E%90%E4%B8%8Evar/</link>
      <pubDate>Wed, 14 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-11-14-r%E9%87%91%E8%9E%8D%E5%88%86%E6%9E%90%E4%B8%8Evar/</guid>
      <description>1 第一题 1.1 加载工具包 1.2 输入要研究的股票数据代码 1.2.1 下载数据并保存到本地 1.2.2 读取本地股票数据 1.2.3 删除该文件 1.3 计算日、月、年、收益率（按收盘价） 并保存数据 1.4 计算 日收益率的均值 和波动率 1.5 计算移动平均值(5,10,20,60期移动平均值) 并保存数据 1.6 画出收盘价与5 期 30 期移动平均线 1.7 寻找金叉死叉，即买卖点 1.7.1 保存买卖点 1.7.2 在图上画出买卖点，并表示标签，买入(B),卖出(S), 1.8 画出所用的均线5,10,30,60 图 以及 收盘价 以及 2均线形成（5,30）的金叉死叉 2 第二题 –VaR 2.1 输入要研究的股票数据代码 2.1.1 下载数据并保存到本地 2.1.2 读入数据 2.1.3 删除该文件 2.2 计算VaR–历史模拟法 2.3 计算VaR–韦伯法 这是一份很久以前一份作业报告.
1 第一题 1.1 加载工具包 # 加载工具包 library(plyr) library(quantmod) library(TTR) library(ggplot2) library(scales) library(stringr) library(dplyr) library(lubridate) library(dygraphs) library(RColorBrewer) library(ggfortify) library(dplyr) 1.</description>
    </item>
    
    <item>
      <title>glmnet包解读1</title>
      <link>/post/2018-09-13-glmnet1/</link>
      <pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-09-13-glmnet1/</guid>
      <description>1 介绍 2 快速开始 3 线性回归 3.1 高斯簇 3.2 多响应高斯簇 4 逻辑回归 4.1 二项分布逻辑回归 4.2 多分类逻辑回归 5 泊松回归 5.1 加载数据集 5.2 拟合模型 5.3 查看拟合效果 5.4 预测 6 Cox模型 6.1 载入数据集 6.2 拟合模型 6.3 查看拟合效果 6.4 交叉验证 7 稀疏矩阵 1 介绍 glmnet 包解决了一下问题（目标函数） \[ \min_{\beta_0,\beta} \frac{1}{N} \sum_{i=1}^{N} w_i l(y_i,\beta_0+\beta^T x_i) + \lambda\left[(1-\alpha)||\beta||_2^2/2 + \alpha ||\beta||_1\right], \] #### 1.1 glmnet包安装
install.packages(&amp;quot;glmnet&amp;quot;, repos = &amp;quot;http://cran.us.r-project.org&amp;quot;) 2 快速开始 这节介绍glmnet包中的主要函数以及它们的一般用法，对常用函数的输入参数以及输出结果做简要的说明。
2.1 加载glmnet包 library(glmnet)# 加载glmnet包 以线性回归为例，来说明glmnet包的用法。</description>
    </item>
    
    <item>
      <title>独热编码--哑变量</title>
      <link>/post/2018-08-31-%E7%8B%AC%E7%83%AD%E7%BC%96%E7%A0%81--%E5%93%91%E5%8F%98%E9%87%8F/</link>
      <pubDate>Fri, 31 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-08-31-%E7%8B%AC%E7%83%AD%E7%BC%96%E7%A0%81--%E5%93%91%E5%8F%98%E9%87%8F/</guid>
      <description>独热编码–哑变量 独热编码1 独热编码2 独热编码3 独热编码4 独热编码5 独热编码6 独热编码7 独热编码8 独热编码 转变为原始变量 （即逆运算） 独热编码–哑变量 独热编码： n种状态 转变为n列
哑变量： n种状态转变为n-1列（目的：为了防止共线性的问题）
testFrame &amp;lt;- data.frame(First=sample(1:10, 20, replace=TRUE), Second=sample(1:20, 20, replace=TRUE), Third=sample(1:10, 20, replace=TRUE), Fourth=factor(rep(c(&amp;quot;=A&amp;quot;, &amp;quot;=B&amp;quot;, &amp;quot;=C&amp;quot;, &amp;quot;=D&amp;quot;),5)), Fifth=ordered(rep(c(&amp;quot;=E&amp;quot;, &amp;quot;=F&amp;quot;, &amp;quot;=G&amp;quot;,&amp;quot;=H&amp;quot;, &amp;quot;=I&amp;quot;), 4)), Sixth=rep(c(&amp;quot;=a&amp;quot;, &amp;quot;=b&amp;quot;), 10), Seventh=factor(c(rep(c(&amp;quot;=J&amp;quot;,&amp;quot;=K&amp;quot;,&amp;quot;=L&amp;quot;),6),&amp;quot;=J&amp;quot;,&amp;quot;=K&amp;quot;)) , stringsAsFactors=F) head(testFrame) #&amp;gt; First Second Third Fourth Fifth Sixth Seventh #&amp;gt; 1 8 7 8 =A =E =a =J #&amp;gt; 2 9 2 5 =B =F =b =K #&amp;gt; 3 7 20 10 =C =G =a =L #&amp;gt; 4 4 9 3 =D =H =b =J #&amp;gt; 5 1 6 2 =A =I =a =K #&amp;gt; 6 1 13 1 =B =E =b =L str(testFrame) #&amp;gt; &amp;#39;data.</description>
    </item>
    
    <item>
      <title>ggplot2一页多图(图独立)</title>
      <link>/post/2018-07-15-ggplot2%E4%B8%80%E9%A1%B5%E5%A4%9A%E5%9B%BE%E7%8B%AC%E7%AB%8B%E5%9B%BE/</link>
      <pubDate>Sun, 15 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-15-ggplot2%E4%B8%80%E9%A1%B5%E5%A4%9A%E5%9B%BE%E7%8B%AC%E7%AB%8B%E5%9B%BE/</guid>
      <description>方法一: 使用grid包 方法二: 使用patchwork包 使用plot_layout()函数调整页面布局 图表之间添加或删除空格–plot_spacer() 在一个页面上自由组合各种图(可以毫无关联)，省空间，又能表达自己需求。
require(ggplot2) require(grid) #####现将图画好，并且赋值变量，储存##### p1 &amp;lt;- ggplot(mtcars, aes(mpg, wt, colour = factor(cyl))) + geom_point() p2 &amp;lt;- ggplot(diamonds, aes(carat, depth, colour = color)) + geom_point() p3 &amp;lt;- ggplot(diamonds, aes(carat, depth, colour = color)) + geom_point() + facet_grid(.~color,scale = &amp;quot;free&amp;quot;) p1 p2 p3 这里有三张图p1,p1,p3，我想把它输出到一个页面上，不单独输出，可以用一些方法
方法一: 使用grid包 ########新建画图页面########### grid.newpage() ##新建页面 pushViewport(viewport(layout = grid.layout(2,2))) ####将页面分成2*2矩阵 vplayout &amp;lt;- function(x,y){ viewport(layout.pos.row = x, layout.pos.col = y) } print(p3, vp = vplayout(1,1:2)) ###将（1,1)和(1,2)的位置画图p3 print(p2, vp = vplayout(2,1)) ###将(2,1)的位置画图p2 print(p1, vp = vplayout(2,2)) ###将（2,2)的位置画图p1 #dev.</description>
    </item>
    
    <item>
      <title>相关图之corrplot</title>
      <link>/post/2018-07-15-%E7%9B%B8%E5%85%B3%E5%9B%BE%E4%B9%8Bcorrplot/</link>
      <pubDate>Sun, 15 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-15-%E7%9B%B8%E5%85%B3%E5%9B%BE%E4%B9%8Bcorrplot/</guid>
      <description>相关矩阵图二—–corrplot corrplot::corrplot()函数 由于corrgram::corrgram()函数没有显示相关性的大小度量关系，于是经常用corrplot::corrplot()函数来画相关矩阵图，不过此图的缺点是title画出来不好看
corrplot(corr, method = c(&amp;quot;circle&amp;quot;, &amp;quot;square&amp;quot;, &amp;quot;ellipse&amp;quot;, &amp;quot;number&amp;quot;, &amp;quot;shade&amp;quot;,&amp;quot;color&amp;quot;, &amp;quot;pie&amp;quot;), type = c(&amp;quot;full&amp;quot;, &amp;quot;lower&amp;quot;, &amp;quot;upper&amp;quot;), add = FALSE, col = NULL, bg = &amp;quot;white&amp;quot;, title = &amp;quot;&amp;quot;, is.corr = TRUE, diag = TRUE, outline = FALSE, mar = c(0, 0, 0, 0), addgrid.col = NULL, addCoef.col = NULL, addCoefasPercent = FALSE, order = c(&amp;quot;original&amp;quot;, &amp;quot;AOE&amp;quot;, &amp;quot;FPC&amp;quot;, &amp;quot;hclust&amp;quot;, &amp;quot;alphabet&amp;quot;), hclust.method = c(&amp;quot;complete&amp;quot;, &amp;quot;ward&amp;quot;, &amp;quot;ward.D&amp;quot;, &amp;quot;ward.D2&amp;quot;, &amp;quot;single&amp;quot;, &amp;quot;average&amp;quot;, &amp;quot;mcquitty&amp;quot;, &amp;quot;median&amp;quot;, &amp;quot;centroid&amp;quot;), addrect = NULL, rect.</description>
    </item>
    
    <item>
      <title>相关图之ggplot系列扩展1</title>
      <link>/post/2018-07-15-%E7%9B%B8%E5%85%B3%E5%9B%BE%E4%B9%8Bggplot%E6%89%A9%E5%B1%951/</link>
      <pubDate>Sun, 15 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-15-%E7%9B%B8%E5%85%B3%E5%9B%BE%E4%B9%8Bggplot%E6%89%A9%E5%B1%951/</guid>
      <description>由于corrplot包画图存在一些问题，比如图像不美观，以及title显示不出，等等
于是有了ggplot2 的扩展系列
ggcorrplot包 专门画相关系数矩阵图： https://github.com/kassambara/ggcorrplot
GGally 包： 对ggplot2进行了更多的扩展，其中包括相关系数图： http://ggobi.github.io/ggally/index.html#alterations
ggcorrplot包 library(ggcorrplot) library(purrr) data(mtcars) corr &amp;lt;- cor(mtcars) # 相关系数矩阵 corr %&amp;gt;% head() #&amp;gt; mpg cyl disp hp drat wt #&amp;gt; mpg 1.0000000 -0.8521620 -0.8475514 -0.7761684 0.6811719 -0.8676594 #&amp;gt; cyl -0.8521620 1.0000000 0.9020329 0.8324475 -0.6999381 0.7824958 #&amp;gt; disp -0.8475514 0.9020329 1.0000000 0.7909486 -0.7102139 0.8879799 #&amp;gt; hp -0.7761684 0.8324475 0.7909486 1.0000000 -0.4487591 0.6587479 #&amp;gt; drat 0.6811719 -0.6999381 -0.7102139 -0.4487591 1.0000000 -0.7124406 #&amp;gt; wt -0.</description>
    </item>
    
    <item>
      <title>相关图之ggplot系列扩展2</title>
      <link>/post/2018-07-15-%E7%9B%B8%E5%85%B3%E5%9B%BE%E4%B9%8Bggplot%E6%89%A9%E5%B1%952/</link>
      <pubDate>Sun, 15 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-15-%E7%9B%B8%E5%85%B3%E5%9B%BE%E4%B9%8Bggplot%E6%89%A9%E5%B1%952/</guid>
      <description>由于corrplot包画图存在一些问题，比如图像不美观，以及title显示不出，等等
于是有了ggplot2 的扩展系列
ggcorrplot包 专门画相关系数矩阵图： https://github.com/kassambara/ggcorrplot
GGally 包： 对ggplot2进行了更多的扩展，其中包括相关系数图： http://ggobi.github.io/ggally/index.html#alterations
GGally::ggcorr()函数 介绍 该ggcorr函数是一个可视化函数，用于将相关矩阵绘制为ggplot2对象。它的灵感来自Stack Overflow问题。
解释 相关矩阵显示了相对大量的连续变量之间的相关系数。然而，虽然R提供了一种通过cor函数创建这种矩阵的简单方法，但它没有为该函数创建的矩阵提供绘图方法。
该ggcorr功能提供了这样的绘图方法，使用ggplot2包中实现的“图形语法” 来渲染绘图。在实践中，其结果在图形上接近corrplot功能的结果，这是优秀arm包装的一部分。
安装 install.packages(&amp;quot;GGally&amp;quot;) # 或者 source(&amp;quot;https://raw.githubusercontent.com/briatte/ggcorr/master/ggcorr.R&amp;quot;) 依赖 主要的包依赖ggcorr是ggplot2用于绘图构造的包。
library(ggplot2) 该ggplot2软件包可以从被安装CRAN通过install.packages。这样做也将安装reshape2包，内部ggcorr用于数据操作。
library(GGally) ggcorr(mtcars) ggcorr(iris) # ggcorr会自动挑选数值型变量进行画图,它还产生一个警告，指示数据集的一列不包含数字数据，因此从相关矩阵中删除。从传递给的数据集中删除列可以避免警告， eg: ggcorr(iris[,-5]) #&amp;gt; Warning in ggcorr(iris): data in column(s) &amp;#39;Species&amp;#39; are not numeric and were #&amp;gt; ignored 注意：当与连续色标一起使用时，ggcorr当前也会产生与色彩插值相关的警告。这是一个无害的警告，应该在未来的更新ggplot2和scales包中消失。此警告隐藏在此小插图的其余部分中。
ggcorr(mtcars)# 默认接受数据框，矩阵 ## 可接受相关系数矩阵 ## ggcorr支持cor函数提供的所有相关方法。参考cor()函数: ## cor(x, y = NULL, use = &amp;quot;everything&amp;quot;,method = c(&amp;quot;pearson&amp;quot;, &amp;quot;kendall&amp;quot;, &amp;quot;spearman&amp;quot;)) ggcorr(data = NULL, cor_matrix = cor(mtcars, use = &amp;quot;everything&amp;quot;)) 控制图例的颜色块 默认图例颜色是连续的，</description>
    </item>
    
    <item>
      <title>R计算微积分</title>
      <link>/post/test-toc/</link>
      <pubDate>Sat, 10 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/test-toc/</guid>
      <description>(一)R 计算微积分 1.1差分 x=1:12 diff(x) #向量差分 后面一个数减去前面一个数 ## [1] 1 1 1 1 1 1 1 1 1 1 1 z=matrix(x,3,4) z ## [,1] [,2] [,3] [,4] ## [1,] 1 4 7 10 ## [2,] 2 5 8 11 ## [3,] 3 6 9 12 diff(z) #矩阵差分 前行减去后行 ## [,1] [,2] [,3] [,4] ## [1,] 1 1 1 1 ## [2,] 1 1 1 1 1.2 符号计算–微分 1.2.1求一元函数导数— \(\sin{x}\) 的一阶导数为： \(\cos{x}\) 在R里，声明表达式对象使用 expression() 函数, 计算一阶导数用D()函数,格式：D(表达式,对谁求导)</description>
    </item>
    
    <item>
      <title>因子数据类型处理</title>
      <link>/post/2018-01-14-factor/</link>
      <pubDate>Sun, 14 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-01-14-factor/</guid>
      <description>因子类型 变量可归结为名义型、有序型或连续型变量，
类别（名义型）变量和有序类别（有序型）变量在R中称为因子（factor） ，如性别、省份、职业。
类别（名义型）变量是没有顺序之分的类别变量。
有序型变量表示一种顺序关系，代表有序量度，如打分结果，疾病严重程度等。而非数量关系。
连续型变量可以呈现为某个范围内的任意值，比如年龄
1、基础函数 针对因子型数据，我们一般需要用到三种变化
更改level标签名 更改level顺序 创建有序因子 用factor()函数把字符型向量转换成因子，如
x &amp;lt;- c(&amp;quot;男&amp;quot;, &amp;quot;女&amp;quot;, &amp;quot;男&amp;quot;, &amp;quot;男&amp;quot;, &amp;quot;女&amp;quot;) sex &amp;lt;- factor(x) #将此向量存储为(1, 2, 1, 1，2)，并在内部将其关联为1=&amp;quot;男&amp;quot;和2=&amp;quot;女&amp;quot;（具体赋值根据字母顺序而定）。 sex ## [1] 男 女 男 男 女 ## Levels: 男 女 attributes(sex) ## $levels ## [1] &amp;quot;男&amp;quot; &amp;quot;女&amp;quot; ## ## $class ## [1] &amp;quot;factor&amp;quot; 因子有class属性，取值为&#34;factor&#34;， 还有一个levels(水平值)属性， 此属性可以用levels()函数访问，如
levels(sex)#查看某个因子的标签有哪些 ## [1] &amp;quot;男&amp;quot; &amp;quot;女&amp;quot; 因子的levels属性可以看成是一个映射， 把整数值1,2,…,映射成这些水平值， 因子在保存时会保存成整数值1,2,等与水平值对应的编号。 这样可以节省存储空间， 在建模计算的程序中也比较有利于进行数学运算。
要表示有序型变量，需要为函数factor()指定参数ordered=TRUE。给定向量：
status &amp;lt;- c(&amp;quot;Poor&amp;quot;, &amp;quot;Improved&amp;quot;, &amp;quot;Excellent&amp;quot;, &amp;quot;Poor&amp;quot;) status1 &amp;lt;- factor(status, ordered=TRUE)#会默认关联其值并且按关联的值排序（其实按ascii码表排序）， status1 # 明显可以看出这要的排序并不是我们想要的。 ## [1] Poor Improved Excellent Poor ## Levels: Excellent &amp;lt; Improved &amp;lt; Poor #可以用选项levels自行指定各水平值, 不指定时由x的不同值来求得。 status2 &amp;lt;- factor(status, order=TRUE,levels=c(&amp;quot;Poor&amp;quot;, &amp;quot;Improved&amp;quot;, &amp;quot;Excellent&amp;quot;)) status2 ## [1] Poor Improved Excellent Poor ## Levels: Poor &amp;lt; Improved &amp;lt; Excellent #也可以将数字型变量转为因子变量 ， x &amp;lt;- c(1, 2, 1, 1, 2) (sex=factor(x)) #可以看出，因子水平没有任何区分,可以用labels指定标签 ## [1] 1 2 1 1 2 ## Levels: 1 2 sex &amp;lt;- factor(x, levels=c(1, 2),labels=c(&amp;quot;Male&amp;quot;, &amp;quot;Female&amp;quot;)) #注意到标签的顺序必须和水平相一致 sex ## [1] Male Female Male Male Female ## Levels: Male Female factor()函数的一般形式为</description>
    </item>
    
    <item>
      <title>dplyr -- 3合并数据</title>
      <link>/post/2018-01-04-dplyr3/</link>
      <pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-01-04-dplyr3/</guid>
      <description>1、转换与合并 2、筛选与合并 3、集合操作 4、数据排序 5、 记录是一行,字段是一列
1、转换与合并 left_join(a, b, by = “x1”)： 向数据集a中加入匹配的数据集b记录（行）。
right_join(a, b, by = “x1”)： 向数据集b中加入匹配的数据集a记录。
inner_join(a, b, by = “x1”)： 合并数据。仅保留匹配的记录。
full_join(a, b, by = “x1”)： 合并数据。保留所有记录，所有行。没有的用NA填充
library(dplyr) a=data.frame(x1=c(&amp;quot;A&amp;quot;,&amp;quot;B&amp;quot;,&amp;quot;C&amp;quot;),x2=c(1:3)) b=data.frame(x1=c(&amp;quot;A&amp;quot;,&amp;quot;B&amp;quot;,&amp;quot;D&amp;quot;),x3=c(&amp;quot;T&amp;quot;,&amp;quot;F&amp;quot;,&amp;quot;T&amp;quot;)) a;b ## x1 x2 ## 1 A 1 ## 2 B 2 ## 3 C 3 ## x1 x3 ## 1 A T ## 2 B F ## 3 D T left_join(a, b, by = &amp;quot;x1&amp;quot;)# 向数据集a中加入匹配的数据集b记录。 ## x1 x2 x3 ## 1 A 1 T ## 2 B 2 F ## 3 C 3 &amp;lt;NA&amp;gt; right_join(a, b, by = &amp;quot;x1&amp;quot;)# 向数据集b中加入匹配的数据集a记录。 ## x1 x2 x3 ## 1 A 1 T ## 2 B 2 F ## 3 D NA T inner_join(a, b, by = &amp;quot;x1&amp;quot;)# 合并数据。仅保留匹配的记录。 ## x1 x2 x3 ## 1 A 1 T ## 2 B 2 F full_join(a, b, by = &amp;quot;x1&amp;quot;)# 合并数据。保留所有记录，所有行，没有的用NA填充 ## x1 x2 x3 ## 1 A 1 T ## 2 B 2 F ## 3 C 3 &amp;lt;NA&amp;gt; ## 4 D NA T 2、筛选与合并 semi_join(a, b, by = “x1”)： 数据集a中能与数据集b匹配的记录。</description>
    </item>
    
    <item>
      <title>dplyr -- 2实战</title>
      <link>/post/2018-01-03-dplyrshizhan2/</link>
      <pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-01-03-dplyrshizhan2/</guid>
      <description>1.1、选择行filter() 1.2、选择列 select() 1.3、排序arrange() 1.4、添加新变量mutate 1.5 汇总(行): summarise() 1.6、分组动作 把前两天的两篇文章合并，解决方法：名字还是不能太长，在content目录下新建test目录，把它放在content目录下的test目录，不放在post目录，我的test目录只有两篇文章
1.1、选择行filter() 安装nycflights13包，该软件包中的飞机航班数据将用于本文中dplyr包各个函数的演示
library(dplyr) library(nycflights13) 函数tbl_df()将过长过大的数据集转换为显示更友好的 tbl_df 类型:
flights &amp;lt;- tbl_df(flights) head(flights) #有336,776 x 19 ## # A tibble: 6 x 19 ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; ## 1 2013 1 1 517 515 2 830 819 ## 2 2013 1 1 533 529 4 850 830 ## 3 2013 1 1 542 540 2 923 850 ## 4 2013 1 1 544 545 -1 1004 1022 ## 5 2013 1 1 554 600 -6 812 837 ## 6 2013 1 1 554 558 -4 740 728 ## # … with 11 more variables: arr_delay &amp;lt;dbl&amp;gt;, carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, ## # tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, ## # hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt; filter(flights,origin == &amp;quot;JFK&amp;quot;,month == 6L) #－ 获取六月份所有从”JFK”机场起飞的航班 ## # A tibble: 9,472 x 19 ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; ## 1 2013 6 1 2 2359 3 341 350 ## 2 2013 6 1 538 545 -7 925 922 ## 3 2013 6 1 539 540 -1 832 840 ## 4 2013 6 1 553 600 -7 700 711 ## 5 2013 6 1 554 600 -6 851 908 ## 6 2013 6 1 557 600 -3 934 942 ## 7 2013 6 1 559 600 -1 856 930 ## 8 2013 6 1 606 610 -4 847 906 ## 9 2013 6 1 609 615 -6 759 808 ## 10 2013 6 1 615 610 5 837 847 ## # … with 9,462 more rows, and 11 more variables: arr_delay &amp;lt;dbl&amp;gt;, ## # carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, ## # air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt; slice(flights,1:2) #选取前面的1:2行 ## # A tibble: 2 x 19 ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; ## 1 2013 1 1 517 515 2 830 819 ## 2 2013 1 1 533 529 4 850 830 ## # … with 11 more variables: arr_delay &amp;lt;dbl&amp;gt;, carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, ## # tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, ## # hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt; sample_n(flights, 4, replace = TRUE)# 随机选取4条数据记录。 ## # A tibble: 4 x 19 ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; ## 1 2013 8 22 1857 1705 112 2150 2020 ## 2 2013 5 27 1958 1925 33 2152 2129 ## 3 2013 9 10 1345 1345 0 1520 1520 ## 4 2013 11 21 1058 1100 -2 1311 1304 ## # … with 11 more variables: arr_delay &amp;lt;dbl&amp;gt;, carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, ## # tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, ## # hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt; flights %&amp;gt;% top_n(4,dep_time) ## # A tibble: 29 x 19 ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; ## 1 2013 10 30 2400 2359 1 327 337 ## 2 2013 11 27 2400 2359 1 515 445 ## 3 2013 12 5 2400 2359 1 427 440 ## 4 2013 12 9 2400 2359 1 432 440 ## 5 2013 12 9 2400 2250 70 59 2356 ## 6 2013 12 13 2400 2359 1 432 440 ## 7 2013 12 19 2400 2359 1 434 440 ## 8 2013 12 29 2400 1700 420 302 2025 ## 9 2013 2 7 2400 2359 1 432 436 ## 10 2013 2 7 2400 2359 1 443 444 ## # … with 19 more rows, and 11 more variables: arr_delay &amp;lt;dbl&amp;gt;, carrier &amp;lt;chr&amp;gt;, ## # flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;, ## # distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt; 1.</description>
    </item>
    
    <item>
      <title>R语言标准化数据处理</title>
      <link>/post/2017-11-13-%E6%95%B0%E6%8D%AE%E6%A0%87%E5%87%86%E5%8C%96%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 13 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-11-13-%E6%95%B0%E6%8D%AE%E6%A0%87%E5%87%86%E5%8C%96%E6%96%B9%E6%B3%95/</guid>
      <description>##　1、标准化——数据处理 ***
preProcess(x, method = c(&amp;quot;center&amp;quot;, &amp;quot;scale&amp;quot;), thresh = 0.95, pcaComp = NULL, na.remove = TRUE, k = 5, knnSummary = mean, outcome = NULL, fudge = 0.2, numUnique = 3, verbose = FALSE, freqCut = 95/5,　uniqueCut = 10, cutoff = 0.9, ...) predict(object, newdata, ...) x: 为一个矩阵或数据框，对于非数值型变量将被忽略　method: 指定数据标准化的方法，默认为“center”和“scale”。（必须同时使用这两个，若选一个只能对应中心化或均值化）
其中center表示预测变量值减去均值；scale表示预测变量值除以标准差，故默认标准化方法就是\((x-mu)/std\)。
如果使用range方法，则数据标准为[0,1]的范围，即\((x-min)/(max-min)\)。 ppMethods &amp;lt;- c(&amp;quot;BoxCox&amp;quot;, &amp;quot;YeoJohnson&amp;quot;, &amp;quot;expoTrans&amp;quot;, &amp;quot;invHyperbolicSine&amp;quot;, &amp;quot;center&amp;quot;, &amp;quot;scale&amp;quot;, &amp;quot;range&amp;quot;, &amp;quot;knnImpute&amp;quot;, &amp;quot;bagImpute&amp;quot;, &amp;quot;medianImpute&amp;quot;, &amp;quot;pca&amp;quot;, &amp;quot;ica&amp;quot;, &amp;quot;spatialSign&amp;quot;, &amp;quot;ignore&amp;quot;, &amp;quot;keep&amp;quot;, &amp;quot;remove&amp;quot;, &amp;quot;zv&amp;quot;, &amp;quot;nzv&amp;quot;, &amp;quot;conditionalX&amp;quot;, &amp;quot;corr&amp;quot;) thresh:如果使用主成分分析（PCA)方法，该参数指定累计方差至少达到0.</description>
    </item>
    
    <item>
      <title>knn算法简介</title>
      <link>/post/2017-03-23-knn%E7%AE%97%E6%B3%95/</link>
      <pubDate>Thu, 23 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-03-23-knn%E7%AE%97%E6%B3%95/</guid>
      <description>行业应用：比如文字识别、面部识别、预测某人是否喜欢推荐电影
基因模式识别：比如用于检测某种疾病，更适合于稀有事件的分类问题（客户流失识别）
应用场合：通常最近邻分类器适用特征与目标类之间的关系比较复杂的数字类型或者二者关系难以理解，但是相似类间的特征都是相似的 特点：
1. 简单有效，对数据分布没有假设，数据训练也很快。
但是他没有模型输出，因此限制了对特征的理解。
分类阶段比较慢。
需要标准化(nominal)特征以及缺少数据需要预先处理
优点 缺点 简单且有效 不产生模型．在发现特彻之间关系上的能力有限 对数据的分布没有要求 分类阶段很慢, 需要大量的内存 训练阶段很快 名义变量（特征变量）和缺失数据需要额外处理 k的取值：
1. k通常在3~10之间直接取值（看分析者的心情）
2. 可采用一般方法：k等于训练数据个数的平方根（15个数据，k可能取4）
1. 导入数据 #导入数据 # import the CSV file wbcd &amp;lt;- read.csv(&amp;quot;wisc_bc_data.csv&amp;quot;, stringsAsFactors = FALSE) # 查看一下数据结构，发现除了要预测的变量diagnosis是字符型变量其余全是数字型变量 str(wbcd) ## &amp;#39;data.frame&amp;#39;: 569 obs. of 32 variables: ## $ id : int 87139402 8910251 905520 868871 9012568 906539 925291 87880 862989 89827 ... ## $ diagnosis : chr &amp;quot;B&amp;quot; &amp;quot;B&amp;quot; &amp;quot;B&amp;quot; &amp;quot;B&amp;quot; .</description>
    </item>
    
    <item>
      <title>回归树与模型树</title>
      <link>/post/2017-02-18-tree-model/</link>
      <pubDate>Sat, 18 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-02-18-tree-model/</guid>
      <description>1、理解回归树与模型树 决策树可用于聚类（类别变量），也可用于数值预测,但是本节只考虑决策树用于数值预测.
决策树用于数值预测可以分为回归树和模型树
回归树: 回归树中并没用使用线性回归的方法，而是基于到达叶节点的案例的平均值做出预测
模型树: 模型树和回归树以大致相同的方式生长，但是在每个叶节点，根据到达该节点的案例建立多元线性回归模型。根据叶节点的数目，一棵模型树可能会建立几十甚至上百个这样的模型，可能会使模型树比同等的回归树更难解释，但好处也行能提高精确度。
2、回归树与模型树的优缺点 优点 缺点 将决策树的优点对数值型数据建立模型的能力相结合 不像线性回归那么常用 能自动选择特征，允许该方法与大量特征一起使用 需要大量的训练数据 不需要使用者事先指定模型 难以确定单个特征对于结果的总体净影响 拟合某些类型的数据可能会比线性回归好 可能比回归模型难以解释 不要求用统计的知识来解释模型 用于数值预测的决策树的建立方式与用于分类的决策树建立的方式大致相同。从根节点开始，按照特征使用分而治之的决策对数据进行划分，在进行一次分割后，将会导致结果最大化的均匀增长。
在分类决策树中，一致性(均匀性)是有熵值度量 ，而对于数值型数据是未定义的， 对于数值型决策，一致性(均匀性)可通过统计量(方差、标准差、平均绝对偏差)来度量,根据使用的决策树生长算法，度量方法可能用所不同，但基本原理相同. 常见的一个分割标准成为标准偏差减少(Standard Deciation Reduction,SDR),其公式定义如下\[SDR=sd(T)\]
3、例子——-估计葡萄酒的质量 白葡萄酒包含4898个葡萄酒案例的11种化学特征的信息，对于每种葡萄酒，实验室分析测量的特征包括酸性、含糖量、氯化物含量、硫的含量、酒精度、PH值和密度值
3.1读入数据 其所有特征都是数值型
wine &amp;lt;- read.csv(&amp;quot;whitewines.csv&amp;quot;) 研究一下结果变量的分布,由于是离散的，可用直方图来研究葡萄酒质量的分布：
hist(wine$quality) 符合正态分布。大约以数值为6为中心(也可用summary()函数发现一些数据的异常值等等)，最后划分训练数据与测试数据(数据是随机排序),75%的训练数据，25%的测试数据
wine_train &amp;lt;- wine[1:3750, ] wine_test &amp;lt;- wine[3751:4898, ] 3.2基于数据训练模型—-回归树 library(rpart) m.rpart &amp;lt;- rpart(quality ~ ., data = wine_train) m.rpart# 获取该树的基本信息,#summary(m.rpart) ## n= 3750 ## ## node), split, n, deviance, yval ## * denotes terminal node ## ## 1) root 3750 2945.</description>
    </item>
    
    <item>
      <title>ggfortify包简介</title>
      <link>/post/2017-02-01-ggfortify1jianjie/</link>
      <pubDate>Sun, 12 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-02-01-ggfortify1jianjie/</guid>
      <description>ggfortify 是一个简单易用的R软件包，它可以仅仅使用一行代码来对许多受欢迎的R软件包结果进行二维可视化，这让统计学家以及数据科学家省去了许多繁琐和重复的过程，不用对结果进行任何处理就能以 ggplot 的风格画出好看的图，大大地提高了工作的效率。
接下来我将简单介绍一下怎么用 ggplot2 和 ggfortify 来很快地对PCA、聚类以及LFDA的结果进行可视化，然后将简单介绍用 ggfortify 来对时间序列进行快速可视化的方法。一下都是个人理解，
1、PCA (主成分分析) 其实本包，大多数画图都是采用主成分（不包括因子分析）降维得到两个主成分，在进一步使其主成分为坐标，对应与每个点给出相应的颜色和类别
ggfortify 使 ggplot2 知道怎么诠释PCA对象。加载好 ggfortify 包之后, 你可以对stats::prcomp 和stats::princomp对象使用 ggplot2::autoplot。
autoplot()函数是ggplot2中的，不过ggfortify包里面有泛函s3类的autoplot解释这个函数
ggbiplot()函数中的参数就是autoplot()函数中的参数
autoplot(object, data = NULL, scale = 1, x = 1, y = 2, ...) object : 对象 data : 对应的数据框 colour = &amp;#39;Species&amp;#39; : 若有分类因子变量，可以对不同的类别添加颜色,当为连续值时为逐渐变色 shape = FALSE ： 调整点的形状，可以让所有的点消失，只留下标识（可以为具体的数字，就是形状类型） main 、xlab 、ylab ： 标题 label = TRUE label.size = 3 : 可以给每个点加上标识（以rownames为标准），也可以调整标识的大小.（默认为FALSE） label.label : 标识标签（默认rownames） label.</description>
    </item>
    
    <item>
      <title>2、caret包其他函数介绍</title>
      <link>/post/2017-01-28-caret1otherfun/</link>
      <pubDate>Sat, 28 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-01-28-caret1otherfun/</guid>
      <description>一、创建哑变量 如果你有一个因子型变量需要进行哑变量处理，你会怎么办？也许你会根据该变量的m个水平数构建m-1个哑变量，不错，这样的思路是没有问题的。但如果发现该变量确实很重要，而且水平数目非常多，那你一定会抓狂！如果你会caret包中的dummyVars()函数，那将如虎添翼，效率倍增~我们来看看该函数是如何实现哑变量构建的。
函数语法及参数介绍：
dummyVars(formula, data, sep = &#34;.&#34;,levelsOnly = FALSE, fullRank = FALSE, ...) predict(object, newdata, na.action = na.pass, ...)
formula: 公式右边请指定需要处理为哑变量的因子型变量
sep:设置变量与水平间的分割符，默认为实心点。如x.a，x就是变量名,a就是x的一个水平
levelsOnly:逻辑值，如果为True，则列名中剔除原变量名。如x.a变为a,把因子作为变量名
object:为dummyVars()函数构成的结果
newdata:需要处理的新数据
na.action:缺失值的对待，变量水平中如果有缺失值，则结果仍为缺失值
library(caret) dummy &amp;lt;- dummyVars(formula = ~ ., data = iris,levelsOnly=TRUE)#把因子作为变量名 pred &amp;lt;- predict(dummy, newdata = iris) head(pred) ## Sepal.Length Sepal.Width Petal.Length Petal.Width setosa versicolor virginica ## 1 5.1 3.5 1.4 0.2 1 0 0 ## 2 4.9 3.0 1.4 0.2 1 0 0 ## 3 4.</description>
    </item>
    
    <item>
      <title>GA包---遗传算法</title>
      <link>/post/2015-11-09-ga/</link>
      <pubDate>Mon, 09 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-11-09-ga/</guid>
      <description>GA包—遗传算法 2022年3月23更新
参考: Genetic Algorithms • GA (luca-scr.github.io)
1、用法：(默认求解最大值) 注意: 默认求解最大值 ga(type = c(&amp;quot;binary&amp;quot;, &amp;quot;real-valued&amp;quot;, &amp;quot;permutation&amp;quot;), fitness, ..., # fitness:适应度函数 lower, upper, #解得下界/解得上界(多元变量为一个向量) nBits, #一个种群用二进制编码的长度是多少(长度越大代表精度越高,一般等于变量的个数即可) population = gaControl(type)$population, # 初始种群 selection = gaControl(type)$selection, #选择 crossover = gaControl(type)$crossover, #交叉 mutation = gaControl(type)$mutation, #变异 popSize = 50, #种群大小 pcrossover = 0.8, #交叉概率（默认0.8） pmutation = 0.1, #变异概率（默认0.1） elitism = base::max(1, round(popSize*0.05)), #代沟(默认情况下,前5%个体将在每个迭代中保留) updatePop = FALSE, postFitness = NULL, maxiter = 100, # 最大迭代次数(默认100) run = maxiter, #表示连续出现一定数目的目标函数值未改变,则GA终止搜索 maxFitness = Inf, # 适应度函数的上界,GA搜索后中断 names = NULL, # 表示决策变量名的向量 suggestions = NULL, # 包含某些指定的初始种群 optim = FALSE, # optim默认值为FALSE，用于确定是否应使用使用通用优化算法的局部搜索。有关更多详细信息和更精细的控制，请参阅参数optimArgs。 # 简单理解, 即optim= T时, 表面进过一定次数的迭代后从 GA 最优解开始最为 optim函数的初始值,开始进行局部优化 # optimArgs 控制本地搜索算法的列表，具有以下组件： optimArgs = list(method = &amp;quot;L-BFGS-B&amp;quot;, # 可以是optim函数中的方法 poptim = 0.</description>
    </item>
    
  </channel>
</rss>
